package module1

import breeze.linalg._
import scala.io.Source


object temp {
  println("Welcome to the Scala worksheet")       //> Welcome to the Scala worksheet
  
  val path = "/projects/Coursera-IntroductionToRecommenderSystems/ProgrammingAssignment/src/main/resources/module1/"
                                                  //> path  : String = /projects/Coursera-IntroductionToRecommenderSystems/Program
                                                  //| mingAssignment/src/main/resources/module1/
  
  val movies = Source.fromFile(path + "recsys-data-movie-titles.csv").getLines().map(_.split(",")).map(x => x(0).toInt).zipWithIndex.toMap
                                                  //> movies  : scala.collection.immutable.Map[Int,Int] = Map(809 -> 66, 629 -> 53
                                                  //| , 1422 -> 73, 120 -> 14, 597 -> 47, 3049 -> 85, 550 -> 41, 153 -> 20, 24 -> 
                                                  //| 5, 14 -> 3, 2501 -> 83, 1892 -> 78, 1572 -> 74, 2024 -> 81, 238 -> 27, 121 -
                                                  //| > 15, 602 -> 49, 280 -> 34, 453 -> 39, 243 -> 28, 85 -> 9, 36657 -> 97, 2164
                                                  //|  -> 82, 1900 -> 80, 862 -> 70, 38 -> 6, 424 -> 38, 275 -> 32, 788 -> 63, 197
                                                  //|  -> 26, 329 -> 35, 4327 -> 86, 8358 -> 89, 141 -> 18, 857 -> 69, 77 -> 8, 84
                                                  //| 67 -> 90, 393 -> 36, 13 -> 2, 8587 -> 91, 134 -> 17, 105 -> 11, 558 -> 43, 1
                                                  //| 61 -> 22, 745 -> 60, 180 -> 23, 601 -> 48, 22 -> 4, 5503 -> 87, 641 -> 55, 1
                                                  //| 2 -> 1, 672 -> 58, 604 -> 51, 187 -> 24, 274 -> 31, 1894 -> 79, 98 -> 10, 15
                                                  //| 5 -> 21, 462 -> 40, 278 -> 33, 10020 -> 96, 9741 -> 93, 680 -> 59, 812 -> 67
                                                  //| , 194 -> 25, 557 -> 42, 63 -> 7, 640 -> 54, 414 -> 37, 954 -> 71, 1637 -> 76
                                                  //| , 585 -> 46, 7443 -> 88, 808 -> 65, 11 -> 0, 36955 -> 99, 671 -> 57, 581 -> 
                                                  //| 45, 9802 -> 94, 114 -> 1
                                                  //| Output exceeds cutoff limit.
  val invMovies = movies.map(_.swap)              //> invMovies  : scala.collection.immutable.Map[Int,Int] = Map(69 -> 857, 0 -> 1
                                                  //| 1, 88 -> 7443, 5 -> 24, 10 -> 98, 56 -> 664, 42 -> 557, 24 -> 187, 37 -> 414
                                                  //| , 25 -> 194, 52 -> 607, 14 -> 120, 20 -> 153, 46 -> 585, 93 -> 9741, 57 -> 6
                                                  //| 71, 78 -> 1892, 29 -> 268, 84 -> 2502, 61 -> 752, 89 -> 8358, 1 -> 12, 74 ->
                                                  //|  1572, 6 -> 38, 60 -> 745, 85 -> 3049, 28 -> 243, 38 -> 424, 70 -> 862, 21 -
                                                  //| > 155, 33 -> 278, 92 -> 9331, 65 -> 808, 97 -> 36657, 9 -> 85, 53 -> 629, 77
                                                  //|  -> 1891, 96 -> 10020, 13 -> 114, 41 -> 550, 73 -> 1422, 2 -> 13, 32 -> 275,
                                                  //|  34 -> 280, 45 -> 581, 64 -> 807, 17 -> 134, 22 -> 161, 44 -> 568, 59 -> 680
                                                  //| , 27 -> 238, 71 -> 954, 12 -> 107, 54 -> 640, 49 -> 602, 86 -> 4327, 81 -> 2
                                                  //| 024, 76 -> 1637, 7 -> 63, 39 -> 453, 98 -> 36658, 91 -> 8587, 66 -> 809, 3 -
                                                  //| > 14, 80 -> 1900, 35 -> 329, 48 -> 601, 63 -> 788, 18 -> 141, 95 -> 9806, 50
                                                  //|  -> 603, 67 -> 812, 16 -> 122, 31 -> 274, 11 -> 105, 72 -> 955, 43 -> 558, 9
                                                  //| 9 -> 36955, 87 -> 5503, 
                                                  //| Output exceeds cutoff limit.
                                                  
  val users = Source.fromFile(path + "recsys-data-users.csv").getLines().map(_.split(",")).map(x => x(0).toInt).zipWithIndex.toMap
                                                  //> users  : scala.collection.immutable.Map[Int,Int] = Map(2163 -> 1291, 645 -> 
                                                  //| 5170, 892 -> 5443, 69 -> 5230, 5385 -> 4861, 2199 -> 1331, 3021 -> 2244, 543
                                                  //| 7 -> 4920, 1322 -> 357, 1665 -> 737, 5509 -> 4999, 1036 -> 40, 2822 -> 2022,
                                                  //|  2630 -> 1809, 3873 -> 3189, 4188 -> 3538, 1586 -> 649, 1501 -> 556, 4201 ->
                                                  //|  3554, 2452 -> 1612, 809 -> 5351, 4560 -> 3950, 4447 -> 3824, 3962 -> 3288, 
                                                  //| 1879 -> 974, 5422 -> 4904, 1337 -> 373, 1718 -> 796, 2094 -> 1213, 5469 -> 4
                                                  //| 955, 3944 -> 3268, 1411 -> 456, 5365 -> 4840, 629 -> 5152, 3883 -> 3201, 511
                                                  //| 6 -> 4565, 5561 -> 5057, 2612 -> 1789, 4094 -> 3435, 1024 -> 27, 1469 -> 519
                                                  //| , 365 -> 2951, 5088 -> 4534, 2744 -> 1936, 1369 -> 408, 4835 -> 4255, 138 ->
                                                  //|  426, 2889 -> 2095, 1823 -> 913, 1190 -> 211, 1168 -> 186, 2295 -> 1436, 230
                                                  //| 6 -> 1449, 4571 -> 3963, 3053 -> 2279, 4101 -> 3443, 4450 -> 3828, 3345 -> 2
                                                  //| 604, 760 -> 5298, 4005 -> 3336, 4464 -> 3843, 2341 -> 1488, 101 -> 21, 2336 
                                                  //| -> 1483, 3008 -> 2229, 2
                                                  //| Output exceeds cutoff limit.
  
  
  val m = DenseMatrix.zeros[Int](users.size, movies.size)
                                                  //> m  : breeze.linalg.DenseMatrix[Int] = 0  0  0  0  0  0  0  0  0  0  0  0  0 
                                                  //|  0  0  0  0  0  0  0  0  ... (100 total)
                                                  //| 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  ...
                                                  //| 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  ...
                                                  //| 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  ...
                                                  //| 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  ...
                                                  //| 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  ...
                                                  //| 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  ...
                                                  //| 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  ...
                                                  //| 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  ...
                                                  //| 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  ...
                                                  //| 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  ...
                                                  //| 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  ...
                                                  //| 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  ...
                                                  //| 0  0  0  0  0  0  
                                                  //| Output exceeds cutoff limit.
  Source.fromFile(path + "recsys-data-ratings.csv").getLines().foreach({x =>
  val t = x.split(",")
  m(users(t(0).toInt), movies(t(1).toInt)) = 1
  })
  
  val v = m(::, movies(680))                      //> v  : breeze.linalg.DenseVector[Int] = DenseVector(1, 1, 1, 1, 0, 1, 1, 1, 1,
                                                  //|  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 
                                                  //| 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0
                                                  //| , 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                                  //|  1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 
                                                  //| 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0
                                                  //| , 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1,
                                                  //|  1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 
                                                  //| 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1
                                                  //| , 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1,
                                                  //|  1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 
                                                  //| 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0
                                                  //| , 1, 1, 1, 1, 1, 0, 1, 1
                                                  //| Output exceeds cutoff limit.
  
  val nonV = v.map(x => if(x==1) 0 else 1)        //> nonV  : breeze.linalg.DenseVector[Int] = DenseVector(0, 0, 0, 0, 1, 0, 0, 0,
                                                  //|  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 
                                                  //| 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
                                                  //| , 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                  //|  0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 
                                                  //| 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0
                                                  //| , 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1,
                                                  //|  0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 
                                                  //| 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1
                                                  //| , 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0,
                                                  //|  0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 
                                                  //| 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1
                                                  //| , 1, 0, 0, 0, 0, 0, 1, 0
                                                  //| Output exceeds cutoff limit.
  
  
   val r = (v.asDenseMatrix * m).toDenseVector.toArray.zipWithIndex.filterNot(x => x._2 == movies(680))
                                                  //> r  : Array[(Int, Int)] = Array((2693,0), (2898,1), (3415,2), (2846,3), (312
                                                  //| 2,4), (3115,5), (2215,6), (2294,7), (2650,8), (2793,9), (3180,10), (3065,11
                                                  //| ), (2158,12), (2728,13), (3282,14), (3220,15), (3231,16), (1769,17), (1818,
                                                  //| 18), (2484,19), (2316,20), (3050,21), (3123,22), (2942,23), (2509,24), (239
                                                  //| 6,25), (2872,26), (2943,27), (1392,28), (2448,29), (2849,30), (3030,31), (1
                                                  //| 962,32), (2946,33), (3150,34), (3223,35), (2911,36), (2293,37), (2692,38), 
                                                  //| (3181,39), (2114,40), (3138,41), (3030,42), (2823,43), (2321,44), (2079,45)
                                                  //| , (2599,46), (3294,47), (2680,48), (3137,49), (3572,50), (3297,51), (3335,5
                                                  //| 2), (2291,53), (2721,54), (1895,55), (2048,56), (2787,57), (2761,58), (3004
                                                  //| ,60), (2648,61), (1480,62), (2473,63), (2644,64), (3145,65), (2776,66), (23
                                                  //| 05,67), (3100,68), (2889,69), (2883,70), (2989,71), (2738,72), (2449,73), (
                                                  //| 2700,74), (2475,75), (2705,76), (2808,77), (2808,78), (2802,79), (1799,80),
                                                  //|  (2038,81), (1940,82), 
                                                  //| Output exceeds cutoff limit.

	val nonR = (nonV.asDenseMatrix * m).toDenseVector.toArray
                                                  //> nonR  : Array[Int] = Array(652, 1038, 1119, 607, 1181, 660, 367, 249, 503, 
                                                  //| 631, 1045, 848, 185, 742, 1199, 1165, 1162, 170, 171, 701, 316, 1047, 880, 
                                                  //| 747, 387, 473, 884, 756, 93, 615, 901, 668, 172, 871, 1031, 1201, 609, 552,
                                                  //|  679, 1128, 432, 630, 1241, 1172, 529, 336, 813, 1518, 755, 1041, 1370, 115
                                                  //| 7, 1185, 264, 785, 226, 475, 1167, 1162, 0, 844, 605, 150, 603, 410, 1123, 
                                                  //| 1017, 787, 1070, 843, 1044, 1096, 995, 499, 712, 580, 792, 698, 706, 731, 1
                                                  //| 69, 498, 341, 926, 842, 633, 795, 401, 502, 630, 578, 1177, 242, 325, 500, 
                                                  //| 892, 695, 915, 749, 595)
   
   r.map(x => (invMovies(x._2), (x._1/BigDecimal(v.sum)).setScale(2, BigDecimal.RoundingMode.HALF_UP))).sortBy(x => -1 * x._2).take(5)
                                                  //> res0: Array[(Int, scala.math.BigDecimal)] = Array((603,0.95), (13,0.91), (6
                                                  //| 07,0.89), (597,0.88), (604,0.88))

r.map(x => (invMovies(x._2), (
(x._1/BigDecimal(v.sum))
/
(nonR(x._2)/BigDecimal(nonV.sum))
).setScale(4, BigDecimal.RoundingMode.HALF_UP))).sortBy(x => -1 * x._2).take(5)
                                                  //> res1: Array[(Int, scala.math.BigDecimal)] = Array((243,7.2049), (107,5.6150
                                                  //| ), (275,5.4909), (1900,5.1241), (141,5.1177))
}